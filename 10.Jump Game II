Jump Game II


You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].


//Greddy approach [optimal]
Farthest-> abhi jaha hai vaha se maz kitna ja skte hai 
end -> current jump boundary 

int jump(vector<int>& nums) {
    int n = nums.size();
    int jumps = 0, farthest = 0, end = 0;
    
    for (int i = 0; i < n - 1; i++) {
        farthest = max(farthest, i + nums[i]);
        
        // if we reach the end of the current jump range
        if (i == end) {
            jumps++;
            end = farthest;
        }
    }
    
    return jumps;
}

// DP approach [bottom up]

int jump(vector<int>& nums) {
    int n = nums.size();
    vector<int> dp(n, INT_MAX);
    dp[n - 1] = 0;  // No jumps needed from the end

    for (int i = n - 2; i >= 0; i--) {
        for (int j = 1; j <= nums[i] && i + j < n; j++) {
            if (dp[i + j] != INT_MAX) {
                dp[i] = min(dp[i], 1 + dp[i + j]);
            }
        }
    }

    return dp[0];
}

